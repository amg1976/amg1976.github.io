<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Adri</title>
 <link href="https://amg1976.github.io/atom.xml" rel="self"/>
 <link href="https://amg1976.github.io/"/>
 <updated>2018-05-03T22:14:55+01:00</updated>
 <id>https://amg1976.github.io</id>
 <author>
   <foo></foo>
   <name>Adriano Goncalves</name>
   <email></email>
 </author>

 
 <entry>
   <title>Improving Xcode code coverage report</title>
   <link href="https://amg1976.github.io/blog/2018/05/03/improving-xcode-coverage/"/>
   <updated>2018-05-03T00:00:00+01:00</updated>
   <id>https://amg1976.github.io/blog/2018/05/03/improving-xcode-coverage</id>
   <content type="html">&lt;h3 id=&quot;improving-xcode-code-coverage-report&quot;&gt;Improving Xcode code coverage report&lt;/h3&gt;
&lt;p&gt;When writing unit tests, we should try to exercise all the scenarios and edge cases of the piece of code we are working on. I believe we should try to write them based only on the public contract of the methods and classes and what we know about how that code should work.&lt;/p&gt;

&lt;p&gt;Once you have those tests, you can then look at the actual code being tested and look for special or edge cases that might not being exercised by the initial set of tests. There is one tool in Xcode that can help us detecting those areas that need further testing - Code Coverage reports.&lt;/p&gt;

&lt;h5 id=&quot;enabling-code-coverage&quot;&gt;Enabling Code Coverage&lt;/h5&gt;
&lt;p&gt;Enabling Code Coverage in Xcode is very simple:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Edit scheme &amp;gt; Test &amp;gt; Options &amp;gt; Gather coverage&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can choose to gather coverage for all targets or just select individual targets, depending on the project structure. Once enabled, every time we run the unit tests, we will get a nice report of all the classes and methods in the selected targets, and what percentage of that code is covered by unit tests.&lt;/p&gt;

&lt;h5 id=&quot;what-do-we-want-to-fix&quot;&gt;What do we want to fix&lt;/h5&gt;

&lt;p&gt;However, there is one issue with this report: depending on the type of project and how it is setup, it is possible to have wrong code coverage reports. For Framework projects this shouldn’t be an issue, but for an App project where usually we import the App module as testable into the test cases, like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@testable import MyApp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;when we run the tests, any class or method that is executed when launching the app will also show up in the Code Coverage reports, even if there is no explicit test case that executed that code.&lt;/p&gt;

&lt;h5 id=&quot;replacing-the-appdelegate&quot;&gt;Replacing the AppDelegate&lt;/h5&gt;

&lt;p&gt;As pointed &lt;a href=&quot;http://cleanswifter.com/broken-code-coverage-xcode-fix/&quot;&gt;here&lt;/a&gt;, one possible solution to this issue is replacing the App Delegate with a special version just for unit tests, which will do… nothing! Instead of instantiating the original App Delegate, which should be responsible amongst other things for preparing and showing the window and initial view controller, we will instruct the runtime to execute a special version of the App Delegate.&lt;/p&gt;

&lt;p&gt;To do so, we will need to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create the new version of the App Delegate:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//
// TestingAppDelegate.swift
//

import UIKit

class TestingAppDelegate: UIResponder { }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;then we will need to create another file, which will have the code needed to either execute the default App Delegate or the unit tests specific version:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//
// main.swift
//

import Foundation
import UIKit

let isRunningTests = NSClassFromString(&quot;XCTestCase&quot;) != nil
let appDelegateClass: AnyClass? = isRunningTests ?
    NSClassFromString(&quot;MyAppTests.TestingAppDelegate&quot;) :
    NSClassFromString(&quot;MyApp.AppDelegate&quot;)
guard let finalDelegateClass = appDelegateClass else { exit(1) }

UIApplicationMain(
    CommandLine.argc,
    UnsafeMutableRawPointer(CommandLine.unsafeArgv)
        .bindMemory(
            to: UnsafeMutablePointer&amp;lt;Int8&amp;gt;.self,
            capacity: Int(CommandLine.argc)),
    nil,
    NSStringFromClass(finalDelegateClass)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that, because the App target shouldn’t contain the &lt;code class=&quot;highlighter-rouge&quot;&gt;TestingAppDelegate&lt;/code&gt; nor the unit tests target should contain the &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;, we need to get the actual class executing &lt;code class=&quot;highlighter-rouge&quot;&gt;NSClassFromString(...)&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;now it should be possible to run the unit tests and have correct coverage reports.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Xcode and the case of the missing protocol methods</title>
   <link href="https://amg1976.github.io/blog/2017/07/03/xcode-missing-protocol-methods/"/>
   <updated>2017-07-03T23:30:00+01:00</updated>
   <id>https://amg1976.github.io/blog/2017/07/03/xcode-missing-protocol-methods</id>
   <content type="html">&lt;p&gt;A few days ago I run into an odd issue, where I was trying to mock UserDefaults, in order to add some unit tests to a class in our app. I went with this approach as at the time it looked like the easiest approach, so I could add the unit tests and at the same time I didn’t need to immediately change the implementation of the class, as it depends directly on the UserDefaults class. Sure, maybe the best option probably would have been defining a protocol with the methods we use in that class, and then the changes on the class would be minimal, but the fact was that it looked like the quick and easiest option to go with at the time.&lt;/p&gt;

&lt;p&gt;So, the methods that our class uses from UserDefaults are the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;synchronize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And so I proceeded and added mock implementations for all of them, using only in-memory internal storage. Then, just to make sure my mock class worked as expected, I added some unit tests for it. And this was where I found a strange behavior. One of the unit tests tried to store nil for a specific key. My first approach was to simply set a nil parameter at the call site, like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testSettingNilValueRemovesKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;testString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BMO&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;notTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;beNil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;beNil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;assertionFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But the second expectation on the test was failing! That was weird, as the code of the mock method was fairly simple, just testing the input parameter and if it was, I just removed the key from internal storage.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;internalStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;internalStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That wasn’t making sense and so, instead of calling the method with a nil parameter, I tried  creating a local variable of type Any? and then calling the method with that variable. This time, the test passed. After banging my head against the wall for some time, and with help from @nsomar, we found what was actually happening. We noticed that the stack trace was different between both ways of calling the method - when using a local variable the stack trace showed only one call between invoking the method in the unit test and the method on the mock object but when setting nil as a parameter, we were seeing two method calls between them. Before actually invoking my overridden method on the mock class, another method of the class was being called, namely &lt;code class=&quot;highlighter-rouge&quot;&gt;set(url:forKey:)&lt;/code&gt;, that I did not override on my mock class.&lt;/p&gt;

&lt;p&gt;Why was the call stack being different? What’s the difference between both ways of calling the method &lt;code class=&quot;highlighter-rouge&quot;&gt;set(data:forKey)&lt;/code&gt;? Using the local variable is almost auto explanatory, we were explicitly creating a variable of type &lt;code class=&quot;highlighter-rouge&quot;&gt;Any?&lt;/code&gt; and so the compiler new exactly what method to call.&lt;/p&gt;

&lt;p&gt;But why not with &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;? I can’t find a proper response, other than what we assumed. That &lt;code class=&quot;highlighter-rouge&quot;&gt;Any&lt;/code&gt; is just a keyword, a construct used by the compiler to delay having to deal with whatever is assigned to it. It would be great to find a proper answer to what is happening here, but for now, the key takeaways of this episode:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;pay more attention to the stack trace, specially the intermediate calls from core APIs, as they can be very helpful in understanding what is happening&lt;/li&gt;
  &lt;li&gt;with Swift, almost never is a best approach to subclass, there are other ways to achieve the goal that are safer and more clean to your codebase&lt;/li&gt;
  &lt;li&gt;the Swift compiler is really smart and it does some amazing things, but sometimes we can and should help him by being more clear and explicit on the types we want to use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Also, achievement unlocked, this post was written 35.000 ft above sea level, on my way to some deserved holidays in Portugal!&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>WWDC 2017 - lot's of goodies</title>
   <link href="https://amg1976.github.io/blog/2017/06/28/wwdc-2017-review/"/>
   <updated>2017-06-28T17:00:00+01:00</updated>
   <id>https://amg1976.github.io/blog/2017/06/28/wwdc-2017-review</id>
   <content type="html">&lt;p&gt;A couple of weeks have gone by since the closing curtains on this years WWDC, and in my opinion, what a great event it was.&lt;/p&gt;

&lt;p&gt;Now, I still need to catch up with some of the session videos, but having seen most of the ones in my playlist, there are some considerations that I’m ready to make.&lt;/p&gt;

&lt;h3 id=&quot;did-i-got-my-predictions-right&quot;&gt;Did I got my predictions right?&lt;/h3&gt;
&lt;p&gt;If you missed my previous &lt;a href=&quot;/2017-06-02-what-to-expect-wwdc-2017&quot;&gt;post&lt;/a&gt;, I tried with my guessing hat to come up with some predictions of what Apple have been preparing for us, and I’m glad they were spot on.&lt;/p&gt;

&lt;h5 id=&quot;swift-refactoring-tools-on-xcode&quot;&gt;Swift refactoring tools on Xcode&lt;/h5&gt;
&lt;p&gt;Finally we have Swift refactoring in Xcode 9. Available since the first beta, they even got improved with the second beta, either by fixing issues or by adding new refactorings.&lt;/p&gt;

&lt;h5 id=&quot;real-multitasking-on-ipad&quot;&gt;Real multitasking on iPad&lt;/h5&gt;
&lt;p&gt;This year the iPad received  most of the love. Not that the new multitasking features don’t work on the iPhone, they are of course far less usable (or not available at all) than on devices with bigger screens. It shows that Apple engineers invested a lot of time on this, not only for all the features but how easy it looks to use them in our apps.&lt;/p&gt;

&lt;h3 id=&quot;predictions-from-other-people-obviously-much-clever-than-me&quot;&gt;Predictions from other people, obviously much clever than me&lt;/h3&gt;

&lt;h5 id=&quot;siri-speaker&quot;&gt;Siri Speaker&lt;/h5&gt;
&lt;p&gt;It will only be available in six months time, so what was available were prototypes (probably very close to the final version). Even though, the general comments are that it is a pretty solid device, with excellent sound quality.&lt;/p&gt;

&lt;h5 id=&quot;new-ipad-pro-105-inch&quot;&gt;New iPad Pro 10.5-inch&lt;/h5&gt;
&lt;p&gt;I only had the chance to play with a 1st gen iPad Pro with a Pencil a couple of weeks ago, but boy, was that fun! The responsiveness of the Pencil together with all that screen estate, coupled with a few well implemented apps made me feel like I was an artist (which I’m obviously not). This new iPad Pro, which I had the opportunity to see live already, looks like a perfect combination of power with usability, and together with the new features from iOS 11, I bet it will bump the sales for sure.&lt;/p&gt;

&lt;h5 id=&quot;new-layout-of-the-iphones-back-side&quot;&gt;New layout of the iPhones back side&lt;/h5&gt;
&lt;p&gt;This one is still to be confirmed, and I haven’t seen or read anything that points to it being a thing, so it remains to be proved.&lt;/p&gt;

&lt;h5 id=&quot;dark-mode&quot;&gt;Dark mode&lt;/h5&gt;
&lt;p&gt;So, it’s not a full dark mode, it’s a feature called “Smart Invert Colors” and it looks like it’s applying a dark background instead of a white one, maintaining the remaining colors. Again, need to have a device with it to properly test it, but it looks like a good start to a full dark theme.&lt;/p&gt;

&lt;h3 id=&quot;other-stuff-i-didnt-remember-or-even-thought-it-would-be-possible-to-happen&quot;&gt;Other stuff I didn’t remember or even thought it would be possible to happen&lt;/h3&gt;

&lt;h4 id=&quot;wireless-debugging-and-multiple-simulators&quot;&gt;Wireless debugging and multiple simulators&lt;/h4&gt;
&lt;p&gt;This one was a surprise to me, specially because it makes so much sense and still, it was out of my radar for quite some time now. Remote debugging will only work with devices on iOS 11 but you can take advantage of multiple simulators right from Xcode beta 1.&lt;/p&gt;

&lt;h4 id=&quot;improved-app-switcher-and-control-center&quot;&gt;Improved app switcher and Control Center&lt;/h4&gt;
&lt;p&gt;I have yet to install iOS 11 on a device, but the first impression I got when watching the session where it was introduced was that… I didn’t like it 😔&lt;/p&gt;

&lt;p&gt;First, having the ability to select which items to show on Control Center, together with app switcher on the iPad seems like an overflow of information. I guess Erica Sadun phrased it better than me on this blog &lt;a href=&quot;http://ericasadun.com/2017/06/23/holy-war-why-i-utterly-loathe-the-new-app-switcher-in-ios-11/&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of my colleagues like it, so I will wait until I have upgraded my device to give a proper opinion.&lt;/p&gt;

&lt;p&gt;And that’s it, it was a great event, with lots of new and cool stuff, that I can’t wait to put my hands on!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS: is it just me, or the actual presentations were not up to the higher standards that we are used to in these events? They didn’t seem well prepared, lots of hesitations from the presenters… by all means, this is not a critic - specially from me, as I’m a terrible public presenter! - just a small comment, as we know Apple always try to have flawless presentations.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>WWDC 2017 - what to expect</title>
   <link href="https://amg1976.github.io/blog/2017/06/02/what-to-expect-wwdc-2017/"/>
   <updated>2017-06-02T22:00:00+01:00</updated>
   <id>https://amg1976.github.io/blog/2017/06/02/what-to-expect-wwdc-2017</id>
   <content type="html">&lt;p&gt;It’s almost that time of the year where the Apple developers community has its biggest event - the WWDC.&lt;/p&gt;

&lt;p&gt;This year as usual, the expectation is around what new features the latest version of iOS will bring us, and maybe some hints to what is the future in terms of devices.&lt;/p&gt;

&lt;p&gt;I am not very good at guessing, and to be honest, I have been falling back in terms of many of the latest SDKs delivered by Apple. I did some experiments around the Watch and AppleTV, played a bit with the Today widget, but unfortunately never delve deep inside those libraries. And regarding Messages, Siri, Car, Home, etc - I didn’t write a single line of code for them.&lt;/p&gt;

&lt;p&gt;So, if I’m not in a good position to play the guessing game, I can however do a short list of some of the expectations from the community and maybe share my opinion on them.&lt;/p&gt;

&lt;h3 id=&quot;around-the-web&quot;&gt;Around the Web&lt;/h3&gt;

&lt;h5 id=&quot;siri-speaker&quot;&gt;Siri Speaker&lt;/h5&gt;
&lt;p&gt;After Amazon and then Google started selling their devices, I guess it would make sense for Apple to jump into this train. According to some &lt;a href=&quot;http://uk.businessinsider.com/amazon-echo-vs-google-home-sales-estimates-chart-2017-5?r=US&amp;amp;IR=T&quot;&gt;statistics&lt;/a&gt;, in the US alone there are around 35M users of voice-enabled speakers in 2017, which represents an increase of 129%. This shows that is market relatively small, but with growing interest from the public. And by having already the software and most of the hardware needed, it wouldn’t be that difficult for Apple to come up with a device as good or even better than the competition.&lt;/p&gt;

&lt;h5 id=&quot;new-layout-of-the-iphones-back-side&quot;&gt;New layout of the iPhones back side&lt;/h5&gt;
&lt;p&gt;Many leaked pictures of the new iPhones show the cameras in a vertical orientation and a Touch ID sensor underneath the Apple logo. About the cameras I have no idea why they would need to change and honestly, it would look a bit weird to see them in that orientation.&lt;/p&gt;

&lt;p&gt;For the sensor, I would hate it! In my job as a developer, most of the times the phone is on top of the table and to start testing some new feature I’m working on, I don’t even grab the phone - I unlock it with a simple tap on the sensor and that’s it. And I don’t think Apple would do that change as it severely changes how people are used to interact and unlock the phone. Of course that doesn’t mean anything - previously you needed to swipe to unlock and now it’s just tap the sensor and then press the home button. The only way I would agree with this change, was if somehow you could do Touch ID anywhere on the front screen, that would be awesome! And if so, sure, add the sensor to the back also 😂&lt;/p&gt;

&lt;h5 id=&quot;new-ipad-pro-105-inch&quot;&gt;New iPad Pro 10.5-inch&lt;/h5&gt;
&lt;p&gt;I only ever used an iPad Pro for a minute, so I have no opinion on this one. Probably it makes sense to have all the power and functionalities on a more portable form factor.&lt;/p&gt;

&lt;h5 id=&quot;dark-mode&quot;&gt;Dark mode&lt;/h5&gt;
&lt;p&gt;Well, this one is new to me. It probably is a natural next step from previous features, like Night Shift. And if it’s true that future devices will have an OLED screen, as dark modes are more friendly on the batteries.&lt;/p&gt;

&lt;h3 id=&quot;what-i-would-like-to-see&quot;&gt;What I would like to see&lt;/h3&gt;

&lt;h5 id=&quot;swift-refactoring-tools-on-xcode&quot;&gt;Swift refactoring tools on Xcode&lt;/h5&gt;
&lt;p&gt;Ever since Swift was released, this is one of the major flaws that Apple has yet to address. I know Xcode has now much better support for Swift: in the beginning typing &lt;code class=&quot;highlighter-rouge&quot;&gt;@@&lt;/code&gt; would make it crash every time. And for me, coming from Portugal to an Irish keyboard layout (in PT layout, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt; are typed the same way as &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; in the IRL layout), it was sooooo easy to make it crash! And if the Live View Hierarchy inspector or the recent Memory Graph tool shows that Apple cares about Xcode, not having the simplest of the refactoring tools makes some of the common developer tasks a bit more tedious and difficult than they could or should be.&lt;/p&gt;

&lt;h5 id=&quot;real-multitasking-on-ipad&quot;&gt;Real multitasking on iPad&lt;/h5&gt;
&lt;p&gt;If this is the year where we will see new developments in the iPad arena, I guess having true multitasking would make a lot of sense. Recently I saw a &lt;a href=&quot;https://www.youtube.com/watch?v=UyFUDQ5LLZw&quot;&gt;prototype&lt;/a&gt; by Federico Viticci for Macstories of how that could look like and I believe implementing it in a similar way would bring the platform to a whole different level. Of course, with a bit of imagination and a lot of careful planning and hard work, you can kind of make it work right now, just look at the awesome work by the team at &lt;a href=&quot;https://blog.readdle.com/drag-drop-between-readdle-apps-fd079c756b23&quot;&gt;Readdle&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Maybe not</title>
   <link href="https://amg1976.github.io/blog/2017/05/23/maybe-not/"/>
   <updated>2017-05-23T22:00:00+01:00</updated>
   <id>https://amg1976.github.io/blog/2017/05/23/maybe-not</id>
   <content type="html">&lt;p&gt;Well, after all, maybe I wasn’t &lt;a href=&quot;/blog/2017/02/13/first-post/&quot;&gt;that&lt;/a&gt; involved yet…&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>First post</title>
   <link href="https://amg1976.github.io/blog/2017/02/13/first-post/"/>
   <updated>2017-02-13T22:30:00+00:00</updated>
   <id>https://amg1976.github.io/blog/2017/02/13/first-post</id>
   <content type="html">&lt;p&gt;This is my first 100th post.&lt;/p&gt;

&lt;p&gt;I am, however, really focused in getting this moving forward. First, because the platform where I’m hosting this website reminds me of my web developer days. Not that I don’t like working as a mobile developer, but it is nice having a break in Xcode, Swift, Certificates and everything else.&lt;/p&gt;

&lt;p&gt;Also I feel the need to express myself, more than that, sometime in the future, I would like to work for my own and so maybe, by writing it here for everyone to see, it helps by putting some &lt;em&gt;pressure&lt;/em&gt; on myself - after all, I can’t say I’ll do this and then completely ignore it!&lt;/p&gt;
</content>
 </entry>
 

</feed>
